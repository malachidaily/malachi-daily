---
import { getAllVerses, verseTableHeaders } from "../../../api/verses";
import { books, type BookName } from "../../../api/bible/static/books";

const nowAndPastVersesFromApi = await getAllVerses({
    filters: JSON.stringify({
        filter_type: "AND",
        filters: [
            {
                type: "boolean",
                field: verseTableHeaders.pastStartDate,
                value: "1",
            },
        ],
        groups: [],
    }),
    // The minus up front tells the API to order by the descending order.
    orderBy: "-" + verseTableHeaders.startDate,
    size: 100,
});
---

<section class="gap-4 w-full flex flex-col items-center">
    <div class="flex gap-2 items-center w-full">
        <div class="bg-gray-200 dark:bg-gray-700 h-[2px] w-full" role="separator" />
        <select
            id="select-previous-verse"
            class="select btn-filled-contrast !btn-md !pr-10 w-fit"
        >
            <option disabled selected>Review a Past Verse</option>
            <option id="option-clear-verse-off-week" x-show="isOffWeek">Show No Verse ðŸŒ´</option>
            {
                nowAndPastVersesFromApi.results.map((verse: any) => {
                    const book = verse[verseTableHeaders.book];
                    const bookName = book.value as BookName;
                    const bookId = books[bookName]?.bookid;

                    if (!bookId) {
                        return;
                    }

                    return (
                        <option
                            data-book-id={bookId}
                            data-chapter={verse[verseTableHeaders.chapter]}
                            data-start-verse={
                                verse[verseTableHeaders.verseNumberStart]
                            }
                            data-end-verse={
                                verse[verseTableHeaders.verseNumberEnd]
                            }
                            data-book-name={bookName}
                        >
                            {verse[verseTableHeaders.passageNumber]}.{" "}
                            {verse[verseTableHeaders.readableVerseRef] || ""}
                        </option>
                    );
                })
            }
        </select>
        <div class="bg-gray-200 dark:bg-gray-700 h-[2px] w-full" role="separator" />
    </div>
</section>

<script>
    import { fetchAndCache } from "../../../api";
    import { type bibleVersion } from "../../../api/bible/static/books";
    import { setAlpineState } from "../../../utils";

    async function getSelectedVerse({
        bookId,
        chapter,
        verseNum,
        verseNumEnd,
    }: {
        bookId: number;
        chapter: number;
        verseNum: number;
        verseNumEnd: number;
    }): Promise<{ [key in bibleVersion]: string }> {
        let verseNums: number[] = [];
        verseNums.push(verseNum);
        if (verseNumEnd && verseNum < verseNumEnd) {
            for (let i = verseNum + 1; i <= verseNumEnd; i++) {
                verseNums.push(i);
            }
        }

        const fetchUrl =
            "/api/verses?" +
            new URLSearchParams({
                bookId: bookId.toString(),
                chapter: chapter.toString(),
                verses: verseNums.join(","),
            });

        let verses;
        try {
            verses = await fetchAndCache({
                url: fetchUrl,
                cacheKey: fetchUrl,
            });
        } catch (error) {
            throw new Error(
                "Could not find the following verse: " +
                    JSON.stringify(
                        {
                            bookId: bookId.toString(),
                            chapter: chapter.toString(),
                            verses: verseNums.join(","),
                        },
                        null,
                        2,
                    ),
            );
        }

        return verses;
    }

    const selectInputEl: HTMLSelectElement = document.getElementById(
        "select-previous-verse",
    ) as HTMLSelectElement;

    if (Boolean(selectInputEl)) {
        selectInputEl.addEventListener("change", async () => {
            const selectedOption = selectInputEl.selectedOptions[0];

            // If the option selected is to clear the verse for the off week,
            // then clear all of the state and return.
            if (selectedOption.id === "option-clear-verse-off-week") {
                localStorage.removeItem('offWeekScriptureVersesObj');
                localStorage.removeItem('offWeekScriptureRef');
                setAlpineState("versesObj", {});
                setAlpineState("scriptureRef", "");
                setAlpineState("bookName", "");
                setAlpineState("chapter", 0);
                setAlpineState("hasPreviewVerse", false);
                setAlpineState("fidelity", 0);
                return;
            }

            const {
                bookId,
                chapter,
                startVerse,
                endVerse,
                bookName = "",
            } = selectInputEl.selectedOptions[0].dataset;

            const verses = await getSelectedVerse({
                bookId: Number(bookId),
                chapter: Number(chapter),
                verseNum: Number(startVerse),
                verseNumEnd: Number(endVerse || 0),
            });

            const scriptureRef = `${bookName} ${chapter}:${startVerse}${endVerse ? `-${endVerse}` : ""}`;

            // Add the verses to the versesObj in AlpineJS.
            setAlpineState("versesObj", verses);
            localStorage.setItem('offWeekScriptureVersesObj', JSON.stringify(verses));
            setAlpineState("scriptureRef", scriptureRef);
            localStorage.setItem('offWeekScriptureRef', scriptureRef);
            setAlpineState("bookName", bookName);
            setAlpineState("chapter", Number(chapter));
            setAlpineState("hasPreviewVerse", true);
            // This resets the number of hidden words to zero when reviewing
            // a previous verse. It makes it easier to read the verse first
            // and then hide words to memorize or remember.
            setAlpineState('fidelity', 0);
        });
    }
</script>
